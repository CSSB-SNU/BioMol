diff --git a/BioMol/BioMol.py b/BioMol/BioMol.py
index 3b0d9b9..748f912 100644
--- a/BioMol/BioMol.py
+++ b/BioMol/BioMol.py
@@ -14,6 +14,7 @@ from BioMol.utils.crop import (
 )
 from BioMol.utils.read_lmdb import read_cif_lmdb, read_MSA_lmdb
 from BioMol import ALL_TYPE_CONFIG_PATH, PROTEIN_ONLY_CONFIG_PATH
+from BioMol.utils.error import NoInterfaceError
 
 """
 BioMol class
@@ -281,9 +282,17 @@ class BioMol:
                 chain_bias, self.structure, crop_length
             )
         elif method == "interface":
-            crop_indices, crop_chain = crop_spatial_interface(
-                interface_bias, self.structure, crop_length
-            )
+            try:
+                crop_indices, crop_chain = crop_spatial_interface(
+                    interface_bias, self.structure, crop_length
+                )
+            except NoInterfaceError:
+                # print(
+                #     "No interface found. Using spatial crop instead of interface crop."
+                # )
+                crop_indices, crop_chain = crop_spatial(
+                    chain_bias, self.structure, crop_length
+                )
 
         crop_sequence_hash = {
             chain: self.structure.sequence_hash[chain] for chain in crop_chain
diff --git a/BioMol/utils/MSA.py b/BioMol/utils/MSA.py
index 81b04f1..f5f93cb 100644
--- a/BioMol/utils/MSA.py
+++ b/BioMol/utils/MSA.py
@@ -656,7 +656,7 @@ class ComplexMSA:  # TODO
 
         self.num_of_paired = paired_num_of_seqs
         self.num_of_unpaired = self.msa.shape[0] - paired_num_of_seqs - len(gap_idx)
-        self.total_depth = self.num_of_paired + self.num_of_unpaired
+        self.total_depth = self.msa.shape[0]
 
     def to_a3m(self, annotations: list[str], msa: np.ndarray, save_path: str):
         if annotations is None:
@@ -677,29 +677,17 @@ class ComplexMSA:  # TODO
     def sample(
         self,
         max_msa_depth: int = 256,
-        ratio: tuple[float, float] = (0.5, 0.5),
     ) -> tuple[np.ndarray, np.ndarray, np.ndarray]:
         if self.total_depth < max_msa_depth:
             max_msa_depth = self.total_depth
-        sampled = [int(ratio[ii] * max_msa_depth) for ii in range(3)]
-        if sum(sampled) != max_msa_depth:
-            sampled[0] += 1  # make sure the sum is equal to max_msa_depth
-
-        to_be_sampled = (self.num_of_paired, self.num_of_unpaired)
-        if to_be_sampled[0] < sampled[0]:
-            sampled[1] += sampled[0] - to_be_sampled[0]
-            sampled[0] = to_be_sampled[0]
 
         query = np.array([0])
-        paired_sampled = np.random.choice(
-            self.num_of_paired, sampled[0] - 1, replace=False
-        )  # -1 for query
-        unpaired_sampled = (
-            np.random.choice(self.num_of_unpaired, sampled[1], replace=False)
-            + self.num_of_paired
+        sampled_indices = np.random.choice(
+            np.arange(1, self.total_depth),
+            size=max_msa_depth - 1,
+            replace=False,
         )
-
-        sampled_indices = np.concatenate([query, paired_sampled, unpaired_sampled])
+        sampled_indices = np.concatenate([query, sampled_indices])
         sampled_indices = np.sort(sampled_indices)
 
         sampled_annotation = self.annotation[sampled_indices]
@@ -708,13 +696,10 @@ class ComplexMSA:  # TODO
         sampled_deletion_value = self.deletion_value[sampled_indices]
 
         return (
-            sampled_indices,
             sampled_annotation,
             sampled_sequence,
             sampled_has_deletion,
             sampled_deletion_value,
-            self.profile,
-            self.deletion_mean,
         )
 
     def __repr__(self):
diff --git a/BioMol/utils/crop.py b/BioMol/utils/crop.py
index 270497d..26fd3a2 100644
--- a/BioMol/utils/crop.py
+++ b/BioMol/utils/crop.py
@@ -1,6 +1,7 @@
 import random
 import torch
 from BioMol.utils.hierarchy import BioMolStructure
+from BioMol.utils.error import NoInterfaceError
 
 
 def get_chain_crop_indices(
@@ -129,6 +130,24 @@ def crop_spatial_interface(
         return valid_residue_indices, chain_crop
 
     chain_list = list(residue_chain_break.keys())
+
+    # 20250601 psk
+    # 6yfs A,B valid residues are filtered out by signalp
+    # so in this case, we need to define valid_chain_list
+    valid_chain_list = []
+    residue_mask = residue_tensor[:, 4] == 1
+    for chain in chain_list:
+        chain_start, chain_end = residue_chain_break[chain]
+        if torch.any(residue_mask[chain_start : chain_end + 1]):
+            valid_chain_list.append(chain)
+    if len(valid_chain_list) == 0:
+        raise ValueError("No valid chains found in the biomolstructure.")
+
+    if interface_bias is not None and (
+        interface_bias[0] not in valid_chain_list
+        or interface_bias[1] not in valid_chain_list
+    ):
+        raise NoInterfaceError(f"No interface found for {interface_bias}")
     if interface_bias is not None:
         assert interface_bias[0] in chain_list, (
             f"Invalid chain: {interface_bias[0]} \
@@ -140,7 +159,7 @@ def crop_spatial_interface(
         )
         pivot_chain = interface_bias[0]
     else:
-        pivot_chain = random.choice(chain_list)
+        pivot_chain = random.choice(valid_chain_list)
     pivot_chain_id = chain_list.index(pivot_chain)
 
     if interface_bias is not None:
@@ -150,6 +169,8 @@ def crop_spatial_interface(
         contact_nodes = contact_graph.get_contact_node(None, pivot_chain_id)
         crop_nodes = contact_nodes
         crop_chains = [chain_list[i] for i in crop_nodes]
+        if len(crop_chains) == 0:
+            raise NoInterfaceError(f"No interface found for chain {pivot_chain}")
     crop_chains_residue_idx = []
     for chain in crop_chains:
         crop_chains_residue_idx.extend(
@@ -175,6 +196,10 @@ def crop_spatial_interface(
     distance_map[:, ~crop_chain_residue_mask] = float("inf")
     interface_residues = distance_map.min(dim=1).values < interface_distance_cutoff
     interface_residue_indices = torch.where(interface_residues)[0]
+    if len(interface_residue_indices) == 0:
+        raise NoInterfaceError(
+            f"No interface residues found for chain {pivot_chain} with cutoff {interface_distance_cutoff}"
+        )  # TODO bug
     pivot_residue_idx = random.choice(interface_residue_indices)
     pivot_residue_idx += residue_chain_break[pivot_chain][0]
 
@@ -204,8 +229,6 @@ def crop_spatial_interface(
             crop_chain.append(chain)
 
     chain_crop = get_chain_crop_indices(residue_chain_break, crop_indices)
-    if len(crop_chain) == 1:
-        breakpoint()
 
     return crop_indices, chain_crop
 
diff --git a/BioMol/utils/error.py b/BioMol/utils/error.py
index 2ae60b2..684f477 100644
--- a/BioMol/utils/error.py
+++ b/BioMol/utils/error.py
@@ -26,3 +26,9 @@ class EmptyStructureError(Exception):
     def __init__(self, message):
         self.message = message
         super().__init__(self.message)
+
+
+class NoInterfaceError(Exception):
+    def __init__(self, message):
+        self.message = message
+        super().__init__(self.message)
diff --git a/BioMol/utils/hierarchy.py b/BioMol/utils/hierarchy.py
index 705fab1..3bca48c 100644
--- a/BioMol/utils/hierarchy.py
+++ b/BioMol/utils/hierarchy.py
@@ -1034,6 +1034,7 @@ class AsymmetricChain:
         scheme_type = self.scheme.scheme_type
         cif_idx_list = self.scheme.cif_idx_list
         auth_idx_list = self.scheme.auth_idx_list
+        # hetero_list = self.scheme.hetero_list
         hetero_list = None
 
         for model_id in self.structure.keys():
@@ -2672,8 +2673,8 @@ class BioMolStructure:
                 f"Empty structure for {ID} {bioassembly_id} {model_id} {alt_id}"
             )
         self._load_sequence_hash()  # WARNING!!! This function only works for protein
-        self._load_contact_graph()
-        self._load_graph_cluster()
+        # self._load_contact_graph()
+        # self._load_graph_cluster()
         if remove_signal_peptide:
             # it requires signalp which is precomputed. (SIGNALP_PATH)
             self.remove_signal_peptide()
diff --git a/BioMol/utils/parser.py b/BioMol/utils/parser.py
index c3ffdb8..7ccf13a 100644
--- a/BioMol/utils/parser.py
+++ b/BioMol/utils/parser.py
@@ -90,7 +90,6 @@ def parse_chem_comp(chem_comp_id, chem_comp_item):
         else:
             output_1D[key] = Feature1D(key, data, mask, feature_level, None)
 
-
     if "_chem_comp_bond.atom_id_1" in chem_comp_item:
         _chem_comp_bond_atom_id1 = chem_comp_item["_chem_comp_bond.atom_id_1"]
         _chem_comp_bond_atom_id2 = chem_comp_item["_chem_comp_bond.atom_id_2"]
@@ -148,7 +147,6 @@ def compare_ideal_chem_comp(chem_comp):
     if chem_comp_id == "UNL":
         return ideal_chem_comp
 
-
     chem_comp_help = {}
 
     # compare 0d feature
@@ -158,10 +156,8 @@ def compare_ideal_chem_comp(chem_comp):
         if key in chem_comp["0D"].keys():
             in_item, ideal = chem_comp["0D"][key], ideal_chem_comp[key]
             if in_item != ideal:
-                chem_comp_help[key] = (
-                    f"{key} is different : load {in_item}, \
+                chem_comp_help[key] = f"{key} is different : load {in_item}, \
                         but {ideal} at external source."
-                )
         else:
             chem_comp["0D"][key] = ideal_chem_comp[key]
             flag_0d.append(f"0D {key} is from external source")
@@ -175,12 +171,11 @@ def compare_ideal_chem_comp(chem_comp):
         if input_full_atoms != ideal_full_atoms:
             chem_comp_help["1D"] = (
                 f"full_atoms between loaded item and external source is \
-                    different. You should check it." # Ex) 3q4p M7G H82
+                    different. You should check it."  # Ex) 3q4p M7G H82
             )
             # in this case, we only use ideal chem_comp for 1D features.
             chem_comp["1D"] = {}
 
-
     key_1d = chem_comp_configs["1D"].keys()
     for key in key_1d:
         if key in chem_comp["1D"]:
@@ -1371,23 +1366,29 @@ def parse_simple_pdb(pdb_path, cif_configs=None):
 if __name__ == "__main__":
     cif_config_path = "./BioMol/configs/types/protein_only.json"
     cif_dir = "/public_data/BioMolDB_2024Oct21/cif/"
-    
+
     cif_list = [
-    # "1ap8", "1ej1", "1ej4", "1ejh", "1jtf", "1rf8", "1v39", "1xmm",
-    # "2idv", "2jh8", "2vp3",
-    # "3m93", "3q4p",
-    # "4b6u", "4emf", "4or4", "4tqc",
-    # "5bv3", "5dto", "5f98", "5h1m", "5kqs", "5lop", "5me6", "5msg", "5n2v",
-    # "6c6k", "6evj", "6irz", "6is0", "6qcv", "6qcw", "6qcx", "6rr7", "6trq",
-    # "6vu1", "6vvj", "6wq3", "6zqg",
-    # "7jpe", "7jyy", "7jz0", "7l6r", "7l6t", "7sez", "7sf0",
-    # "8qoi", "8r6w", "8r6y", "8srr", "8suy", "8sx4", "8vuo",
-    # "9don"
-    "3q4p"
+        # "1ap8", "1ej1", "1ej4", "1ejh", "1jtf", "1rf8", "1v39", "1xmm",
+        # "2idv", "2jh8", "2vp3",
+        # "3m93", "3q4p",
+        # "4b6u", "4emf", "4or4", "4tqc",
+        # "5bv3", "5dto", "5f98", "5h1m", "5kqs", "5lop", "5me6", "5msg", "5n2v",
+        # "6c6k", "6evj", "6irz", "6is0", "6qcv", "6qcw", "6qcx", "6rr7", "6trq",
+        # "6vu1", "6vvj", "6wq3", "6zqg",
+        # "7jpe", "7jyy", "7jz0", "7l6r", "7l6t", "7sez", "7sf0",
+        # "8qoi", "8r6w", "8r6y", "8srr", "8suy", "8sx4", "8vuo",
+        # "9don"
+        "3q4p"
     ]
     # walk
     for cif_ID in cif_list:
-        cif_path = "/public_data/BioMolDB_2024Oct21/cif/" + cif_ID[1:3] + "/" + cif_ID + ".cif.gz"
+        cif_path = (
+            "/public_data/BioMolDB_2024Oct21/cif/"
+            + cif_ID[1:3]
+            + "/"
+            + cif_ID
+            + ".cif.gz"
+        )
         print(f"Parsing {cif_path}")
         try:
             bioassembly = parse_cif(cif_path, cif_config_path)
diff --git a/test.py b/test.py
index f347fcb..9b284e3 100644
--- a/test.py
+++ b/test.py
@@ -1,21 +1,30 @@
 from BioMol.BioMol import BioMol
+from BioMol import DB_PATH
+from BioMol.utils.parser import parse_cif
 
 if __name__ == "__main__":
     # BioMol automatically generate all biological assemblies.
-    biomol = BioMol(
-        # pdb_ID="6nu2", # lower case
-        cif = "/data/psk6950/BioMolDB_2024Oct21/cif/nu/6nu2.cif.gz",
-        remove_signal_peptide = True,
-        mol_types=["protein"], # only protein
-        use_lmdb=False
-    )
+    # biomol = BioMol(
+    #     # pdb_ID="6nu2", # lower case
+    #     cif=f"{DB_PATH}/cif/vy/2vy1.cif.gz",
+    #     remove_signal_peptide=True,
+    #     # mol_types=["protein"], # only protein
+    #     use_lmdb=False,
+    # )
     # biomol = BioMol(
     #     cif="5hlt.cif", # This file should be from the PDB database.
     #     mol_types=["protein","nucleic_acid", "ligand"],
     #     remove_signal_peptide=True,
     #     use_lmdb=False, # If you want to load NA or ligand you must set use_lmdb=False,
     # )
-    biomol.choose("1", "1", ".")
+
+    bioassembly = parse_cif(
+        cif_path=f"{DB_PATH}/cif/vy/2vy1.cif.gz",
+        cif_configs="./BioMol/configs/types/base.json",
+    )
+    breakpoint()
+
+    # biomol.choose("1", "1", "B")
     breakpoint()
 
     # choose assembly id, model_id, alt_id
@@ -23,11 +32,10 @@ if __name__ == "__main__":
     crop_indices, seq_hash_to_crop_indices = biomol.get_crop_indices()
     biomol.crop(seq_hash_to_crop_indices)
 
-
     breakpoint()
 
     # If you want to save loaded structure, you can use the following code.
-    biomol.structure.to_mmcif("loaded_5hlt.cif") # save the loaded structure
+    biomol.structure.to_mmcif("loaded_5hlt.cif")  # save the loaded structure
 
     # # Cropping and loading MSA
     # biomol.crop_and_load_msa(
